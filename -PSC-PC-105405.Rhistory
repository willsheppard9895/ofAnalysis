simVA.t <- sort(rnorm(n, mean = m, sd = sd))
# finds whihc condition the participant performed worse at
worseCond <- data[which.max(data$VA.t), 2]
if (worseCond == 0){
betterCond <- 1
}else{
betterCond <- 0
}
better <- rep(betterCond, each = n/2)
worse <- rep(worseCond, each = n/2)
simCondition <- c(better, worse)
simConditionLong <- c(simConditionLong, simCondition)
simVA.tLong <- c(simVA.tLong, simVA.t)
}
simConditionLong
simVA.tLong
simData$simCondition <- simConditionLong
pps <- unique(d$Participant.Private.ID)
simData <- data.frame(matrix(
nrow = length(pps)*10 + 1,
ncol = 3
))
colnames(simData) <- c("id", "simCondition", "simVAT")
simCondition <- NA
simVA.t <- NA
simConditionLong <- NA
simVA.tLong <- NA
for (pp in pps) {
data <- d %>%
filter(Participant.Private.ID == pp)
n <- 10
m <- mean(data$VA.t)
sd <- sd(data$VA.t)
simVA.t <- sort(rnorm(n, mean = m, sd = sd))
# finds whihc condition the participant performed worse at
worseCond <- data[which.max(data$VA.t), 2]
if (worseCond == 0){
betterCond <- 1
}else{
betterCond <- 0
}
better <- rep(betterCond, each = n/2)
worse <- rep(worseCond, each = n/2)
simCondition <- c(better, worse)
simConditionLong <- c(simConditionLong, simCondition)
simVA.tLong <- c(simVA.tLong, simVA.t)
}
simData$simCondition <- simConditionLong
simData$simVAT <- simVA.tLong
simData$id <- 0:length(simData$id)-1
simData$id <- 0:length(simData$id)-2
simData$id <- 0:length(simData$id)-3
simData$id <- 0:520
View(simData)
simData <- simData %>%
filter(id > 0)
View(simData)
simData %>%
group_by(simCondition)%>%
summarise(simVA)
pps <- unique(d$Participant.Private.ID)
simData <- data.frame(matrix(
nrow = length(pps)*10 + 1,
ncol = 3
))
colnames(simData) <- c("id", "simCondition", "simV.t")
simCondition <- NA
simVA.t <- NA
simConditionLong <- NA
simVA.tLong <- NA
for (pp in pps) {
data <- d %>%
filter(Participant.Private.ID == pp)
n <- 10
m <- mean(data$VA.t)
sd <- sd(data$VA.t)
simVA.t <- sort(rnorm(n, mean = m, sd = sd))
# finds whihc condition the participant performed worse at
worseCond <- data[which.max(data$VA.t), 2]
if (worseCond == 0){
betterCond <- 1
}else{
betterCond <- 0
}
better <- rep(betterCond, each = n/2)
worse <- rep(worseCond, each = n/2)
simCondition <- c(better, worse)
simConditionLong <- c(simConditionLong, simCondition)
simVA.tLong <- c(simVA.tLong, simVA.t)
}
simData$simCondition <- simConditionLong
simData$simV.t <- simVA.tLong
simData$id <- 0:520
simData <- simData %>%
filter(id > 0)
simData %>%
group_by(simCondition)%>%
summarise(simVA)
simData %>%
group_by(simCondition)%>%
summarise(simVA.t)
colnames(simData) <- c("id", "simCondition", "simVA.t")
simData %>%
group_by(simCondition)%>%
summarise(simVA.t)
simData %>%
dplyr::group_by(simCondition)%>%
dplyr::summarise(simVA.t)
simData %>%
dplyr::group_by(simCondition)%>%
dplyr::summarise(mean(simVA.t))
ggplot(simData, aes(x = simVA.t))+
geom_density()
ggplot(simData, aes(x = simVA.t, group = simCondition))+
geom_density()
ggplot(simData, aes(x = simVA.t, group = simCondition, color = simCondition))+
geom_density()
simVaGammaCondition <- glmer(simVA.t ~ simCondition + (simCondition|id),
family = Gamma(link = "identity"),
data = simData,
glmerControl(optimizer = "Nelder_Mead", optCtrl = list(maxfun = 10000000)))
simVaGammaCondition <- glmer(simVA.t ~ simCondition + (1|id),
family = Gamma(link = "identity"),
data = simData,
glmerControl(optimizer = "Nelder_Mead", optCtrl = list(maxfun = 10000000)))
simVaGammaCondition <- glmer(simVA.t ~ simCondition + (simCondition|id),
family = Gamma(link = "identity"),
data = simData,
glmerControl(optimizer = "Nelder_Mead", optCtrl = list(maxfun = 10000000)))
?rep
rep(1:5, each = 5)
rep(1:5, legth.out = 520)
rep(1:5, length.out = 520)
seq(from = 1, to = 256, by = 5)
seq(from = 5, to = 260, by = 5)
c <- 1:length(a)
a <- seq(from = 1, to = 256, by = 5)
b <- seq(from = 5, to = 260, by = 5)
c <- 1:length(a)
print(a[ind])
for (ind in c) {
a[ind]
}
for (ind in c) {
print(a[ind])
}
for (ind in c) {
print(a[ind]:c[ind])
}
for (ind in c) {
d <- a[ind]
e <- c[ind]
print(d:e)
}
for (ind in c) {
d <- a[ind]
e <- c[ind]
print(d)
print(e)
}
for (ind in c) {
d <- a[ind]
e <- b[ind]
print(d)
print(e)
}
for (ind in c) {
d <- a[ind]
e <- b[ind]
print(d:e)
#print(e)
}
for (ind in c) {
d <- a[ind]
e <- b[ind]
print(rep(d:e, times = 2))
#print(e)
}
for (ind in c) {
d <- a[ind]
e <- b[ind]
print(rep(d:e, each = 2))
#print(e)
}
for (ind in c) {
d <- a[ind]
e <- b[ind]
print(rep(d:e, times = 2))
#print(e)
}
for (ind in c) {
d <- a[ind]
e <- b[ind]
list <- rep(d:e, times = 2)
print(list)
}
listLong <- c()
listLong <- NULL
for (ind in c) {
d <- a[ind]
e <- b[ind]
list <- rep(d:e, times = 2)
listLong <- c(listLong, list)
}
listLong
pps <- unique(d$Participant.Private.ID)
pps <- unique(d$Participant.Private.ID)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
library(lmerTest)
require(car)
require(MASS)
pplist <- read.csv("../cleanData/pplist.csv")%>%
select(-X) %>%
rename(id = x)
pps <- as.list(pplist$id)
va <- read.csv("../cleanData/vaThresh.csv")%>%
rename(VA = threshold) %>%
filter(Participant.Private.ID %in% pps)
demo <- read.csv("../studentData/studentDemographicsWideEdit.csv")%>%
filter(Participant.Private.ID %in% pps)
resDF <- demo %>%
select(Participant.Private.ID, Participant.OS, Participant.Monitor.Size)
resDF <- na.omit(resDF)
resDF <- resDF %>%
mutate(pcID = paste(Participant.OS, Participant.Monitor.Size)) %>%
mutate(resID = case_when(
pcID == "Windows 10 1536x864" ~ 1,
pcID == "Windows 10 1280x720" ~ 2,
pcID == "Mac OS 10.15.7 1440x900" ~ 3
)) %>%
select(Participant.Private.ID, resID)
age <- demo %>%
select(Participant.Private.ID, age_in_years)
vaAge <- left_join(va, age)
d <- left_join(vaAge, resDF) %>%
rename(age = age_in_years)%>%
mutate(condition = case_when(
condition == 'clear' ~ 0,
TRUE ~ 1
))
vaViolin <- ggplot(d, mapping = aes(x = condition, y = VA)) +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75)) +
geom_jitter(height = 0, width = 0.2, alpha = .6, aes(color = age, fill = age))+
scale_color_gradient(low = "lightgrey",
high = "black")+
scale_fill_gradient(low = "lightgrey",
high = "black")+
scale_x_discrete(labels = c("Monocular blur", "No blur"))+
theme(#legend.title = element_blank(),
axis.title.x.bottom = element_blank())+
labs(color = "Age (years)",
fill = "Age (years)")
show(vaViolin)
ggplot(d, aes(x = VA, group = condition))+geom_density()
d$VA.t <- d$VA+1
qqp(d$VA.t, "norm")
qqp(d$VA.t, "lnorm")
# qqp requires estimates of the parameters of the negative binomial, Poisson
# and gamma distributions. You can generate estimates using the fitdistr
# function. Save the output and extract the estimates
poisson <- fitdistr(d$VA.t, "Poisson")
qqp(d$VA.t, "pois", lambda = poisson$estimate)
gamma <- fitdistr(d$VA.t, "gamma")
qqp(d$VA.t, "gamma", shape = gamma$estimate[[1]], rate = gamma$estimate[[2]])
require(MASS)
va <- lm(VA.t ~ condition + age,
data = d)
summary(va)
vaG <- glmer(VA.t ~ (1|Participant.Private.ID),
family = Gamma(link = "identity"),
data = d,
glmerControl(optimizer = "Nelder_Mead", optCtrl = list(maxfun = 10000000)))
anova(va, vaG)
pps <- unique(d$Participant.Private.ID)
simData <- data.frame(matrix(
nrow = length(pps)*10 + 1,
ncol = 3
))
colnames(simData) <- c("id", "simCondition", "simVA.t")
simCondition <- NULL
simVA.t <- NULL
simConditionLong <- NULL
simVA.tLong <- NULL
listLong <- NULL
for (pp in pps) {
data <- d %>%
filter(Participant.Private.ID == pp)
n <- 10
m <- mean(data$VA.t)
sd <- sd(data$VA.t)
simVA.t <- sort(rnorm(n, mean = m, sd = sd))
# finds whihc condition the participant performed worse at
worseCond <- data[which.max(data$VA.t), 2]
if (worseCond == 0){
betterCond <- 1
}else{
betterCond <- 0
}
better <- rep(betterCond, each = n/2)
worse <- rep(worseCond, each = n/2)
simCondition <- c(better, worse)
simConditionLong <- c(simConditionLong, simCondition)
simVA.tLong <- c(simVA.tLong, simVA.t)
}
simData$simCondition <- simConditionLong
pps <- unique(d$Participant.Private.ID)
simData <- data.frame(matrix(
nrow = length(pps)*10,
ncol = 3
))
colnames(simData) <- c("id", "simCondition", "simVA.t")
simCondition <- NULL
simVA.t <- NULL
simConditionLong <- NULL
simVA.tLong <- NULL
listLong <- NULL
for (pp in pps) {
data <- d %>%
filter(Participant.Private.ID == pp)
n <- 10
m <- mean(data$VA.t)
sd <- sd(data$VA.t)
simVA.t <- sort(rnorm(n, mean = m, sd = sd))
# finds whihc condition the participant performed worse at
worseCond <- data[which.max(data$VA.t), 2]
if (worseCond == 0){
betterCond <- 1
}else{
betterCond <- 0
}
better <- rep(betterCond, each = n/2)
worse <- rep(worseCond, each = n/2)
simCondition <- c(better, worse)
simConditionLong <- c(simConditionLong, simCondition)
simVA.tLong <- c(simVA.tLong, simVA.t)
}
simData$simCondition <- simConditionLong
simData$simV.t <- simVA.tLong
a <- seq(from = 1, to = 256, by = 5)
b <- seq(from = 5, to = 260, by = 5)
c <- 1:length(a)
for (ind in c) {
e <- a[ind]
f <- b[ind]
list <- rep(e:f, times = 2)
listLong <- c(listLong, list)
}
rep(1:5, length.out = 520)
simData$id <- listLong
simData %>%
dplyr::group_by(simCondition)%>%
dplyr::summarise(mean(simVA.t))
View(simData)
pps <- unique(d$Participant.Private.ID)
simData <- data.frame(matrix(
nrow = length(pps)*10,
ncol = 3
))
colnames(simData) <- c("id", "simCondition", "simVA.t")
simCondition <- NULL
simVA.t <- NULL
simConditionLong <- NULL
simVA.tLong <- NULL
listLong <- NULL
for (pp in pps) {
data <- d %>%
filter(Participant.Private.ID == pp)
n <- 10
m <- mean(data$VA.t)
sd <- sd(data$VA.t)
simVA.t <- sort(rnorm(n, mean = m, sd = sd))
# finds whihc condition the participant performed worse at
worseCond <- data[which.max(data$VA.t), 2]
if (worseCond == 0){
betterCond <- 1
}else{
betterCond <- 0
}
better <- rep(betterCond, each = n/2)
worse <- rep(worseCond, each = n/2)
simCondition <- c(better, worse)
simConditionLong <- c(simConditionLong, simCondition)
simVA.tLong <- c(simVA.tLong, simVA.t)
}
simData$simCondition <- simConditionLong
simData$simVA.t <- simVA.tLong
a <- seq(from = 1, to = 256, by = 5)
b <- seq(from = 5, to = 260, by = 5)
c <- 1:length(a)
for (ind in c) {
e <- a[ind]
f <- b[ind]
list <- rep(e:f, times = 2)
listLong <- c(listLong, list)
}
rep(1:5, length.out = 520)
simData$id <- listLong
simData %>%
dplyr::group_by(simCondition)%>%
dplyr::summarise(mean(simVA.t))
ggplot(simData, aes(x = simVA.t, group = simCondition, color = simCondition))+
geom_density()
simVaGammaCondition <- glmer(simVA.t ~ simCondition + (simCondition|id),
family = Gamma(link = "identity"),
data = simData,
glmerControl(optimizer = "Nelder_Mead", optCtrl = list(maxfun = 10000000)))
summary(simVaGammaCondition)
View(simVaGammaCondition)
pps <- unique(d$Participant.Private.ID)
simData <- data.frame(matrix(
nrow = length(pps)*10,
ncol = 3
))
colnames(simData) <- c("id", "simCondition", "simVA.t")
simCondition <- NULL
simVA.t <- NULL
simConditionLong <- NULL
simVA.tLong <- NULL
listLong <- NULL
for (pp in pps) {
data <- d %>%
filter(Participant.Private.ID == pp)
n <- 10
m <- mean(data$VA.t)
sd <- sd(data$VA.t)
simVA.t <- sort(rnorm(n, mean = m, sd = sd))
# finds whihc condition the participant performed worse at
worseCond <- data[which.max(data$VA.t), 2]
if (worseCond == 0){
betterCond <- 1
}else{
betterCond <- 0
}
better <- rep(betterCond, each = n/2)
worse <- rep(worseCond, each = n/2)
simCondition <- c(better, worse)
simConditionLong <- c(simConditionLong, simCondition)
simVA.tLong <- c(simVA.tLong, simVA.t)
}
simData$simCondition <- simConditionLong
simData$simVA.t <- simVA.tLong
a <- seq(from = 1, to = 256, by = 5)
b <- seq(from = 5, to = 260, by = 5)
c <- 1:length(a)
for (ind in c) {
e <- a[ind]
f <- b[ind]
list <- rep(e:f, times = 2)
listLong <- c(listLong, list)
}
rep(1:5, length.out = 520)
simData$id <- listLong
simData %>%
dplyr::group_by(simCondition)%>%
dplyr::summarise(mean(simVA.t))
simVaGammaCondition <- glmer(simVA.t ~ simCondition + (simCondition|id),
family = Gamma(link = "identity"),
data = simData,
glmerControl(optimizer = "Nelder_Mead", optCtrl = list(maxfun = 10000000)))
summary(simVaGammaCondition)
simVaGammaCondition <- glmer(simVA.t ~ simCondition + (1|id),
family = Gamma(link = "identity"),
data = simData,
glmerControl(optimizer = "Nelder_Mead", optCtrl = list(maxfun = 10000000)))
summary(simVaGammaCondition)
class(simVaGammaCondition)
rm(list = ls())
rm(list = ls(all.names = TRUE))
gc()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
library(lmerTest)
require(car)
require(MASS)
pplist <- read.csv("../cleanData/pplist.csv")%>%
select(-X) %>%
rename(id = x)
pplist <- read.csv("../cleanData/pplist.csv")
View(pplist)
pplist <- read.csv("../cleanData/pplist.csv")%>%
select(-X) %>%
rename(id = x)
colnames(pplist)
?select
pplist <- read.csv("../cleanData/pplist.csv")%>%
dplyr::select(-X) %>%
rename(id = x)
pplist <- read.csv("../cleanData/pplist.csv")%>%
dplyr::select(-X) %>%
rename(id = x)
pps <- as.list(pplist$id)
va <- read.csv("../cleanData/vaThresh.csv")%>%
rename(VA = threshold) %>%
filter(Participant.Private.ID %in% pps)
demo <- read.csv("../studentData/studentDemographicsWideEdit.csv")%>%
filter(Participant.Private.ID %in% pps)
resDF <- demo %>%
select(Participant.Private.ID, Participant.OS, Participant.Monitor.Size)
resDF <- demo %>%
dplyr::select(Participant.Private.ID, Participant.OS, Participant.Monitor.Size)
resDF <- na.omit(resDF)
resDF <- resDF %>%
mutate(pcID = paste(Participant.OS, Participant.Monitor.Size)) %>%
mutate(resID = case_when(
pcID == "Windows 10 1536x864" ~ 1,
pcID == "Windows 10 1280x720" ~ 2,
pcID == "Mac OS 10.15.7 1440x900" ~ 3
)) %>%
select(Participant.Private.ID, resID)
